#!/bin/sh -e

# Source debconf library.
. /usr/share/debconf/confmodule
host=$(hostname -s)
allComponents="OpenUEM Web Console, OpenUEM NATS Server, OpenUEM Agent Worker, OpenUEM Notification Worker, OpenUEM Cert Manager Worker, OpenUEM OCSP Responder"

# TODO allow user to go back
# db_capb backup

# Select components 
db_title OpenUEM components selection
db_input high openuem-server/select-components || true
db_go

# Selected components
db_get openuem-server/select-components
components=$RET

# Postgres dialog
while [ -z "$postgres_host" ]; do
    db_title PostgreSQL Configuration
    db_input high openuem-server/postgres-host || true
    db_go
    db_get openuem-server/postgres-host
    postgres_host=$RET
done
while [ -z "$postgres_port" ]; do
    db_title PostgreSQL Configuration
    db_input high openuem-server/postgres-port || true
    db_go
    db_get openuem-server/postgres-port
    postgres_port=$RET
done
while [ -z "$postgres_username" ]; do
    db_title PostgreSQL Configuration
    db_input high openuem-server/postgres-username || true
    db_go
    db_get openuem-server/postgres-username
    postgres_username=$RET
done
while [ -z "$postgres_password" ]; do
    db_title PostgreSQL Configuration
    db_input high openuem-server/postgres-password || true
    db_go
    db_get openuem-server/postgres-password
    postgres_password=$RET
done
while [ -z "$postgres_database" ] ; do
    db_title PostgreSQL Configuration
    db_input high openuem-server/postgres-database || true
    db_go
    db_get openuem-server/postgres-database
    postgres_database=$RET     
done

# Domain
if [ "$components" = "$allComponents" ] || [ "$components" = "OpenUEM Web Console" ]; then
    while [ -z "$domain" ]; do
        db_title OpenUEM Domain
        db_input high openuem-server/domain || true
        db_go
        db_get openuem-server/domain
        domain=$RET
    done
fi

# Generate certificates?
if [ "$components" = "$allComponents" ]; then
    db_title OpenUEM digital certificates generation
    db_input high openuem-server/certificate-generation || true
    db_go
    db_get openuem-server/certificate-generation
    generateCerts=$RET
fi

# Ask if we must generate a certificate for the reverse proxy domain
if [ "$generateCerts" = "true" ] || [ "$components" = "OpenUEM Web Console" ]; then
    db_title OpenUEM digital certificate for reverse proxy
    db_input high openuem-server/certificate-generation-for-reverse-proxy || true
    db_go
fi

# Ask information for certificates if going to generate them or if NATS or Console component has been selected
if [ "$generateCerts" = "true" ] || echo "$components" | grep -q "\\<OpenUEM NATS Server\\>" || echo "$components" | grep -q "\\<OpenUEM Web Console\\>"; then
    while [ -z "$org_name" ]; do
        db_title Information about your Organization
        db_input high openuem-server/certificate-org-name || true
        db_go
        db_get openuem-server/certificate-org-name
        org_name=$RET
    done;
    db_title Information about your Organization
    db_input high openuem-server/certificate-org-country || true
    db_input high openuem-server/certificate-org-province || true
    db_input high openuem-server/certificate-org-locality || true
    db_input high openuem-server/certificate-org-address || true
    db_go
fi

# NATS
if [ "$components" = "$allComponents" ] || [ "$components" = "OpenUEM NATS Server" ]; then
    while [ -z "$nats_port" ]; do
        db_title OpenUEM NATS Server - Port
        db_input high openuem-server/nats-port || true
        db_go
        db_get openuem-server/nats-port
        nats_port=$RET
    done

    db_title OpenUEM NATS cluster
    db_input high openuem-server/nats-cluster || true
    db_go
    db_get openuem-server/nats-cluster
    configureNATSCluster=$RET

    if [ "$configureNATSCluster" = "true" ]; then
        while [ -z "$nats_cluster_name" ]; do
            db_title OpenUEM NATS Cluster
            db_input high openuem-server/nats-cluster-name || true
            db_go
            db_get openuem-server/nats-cluster-name
        done
        nats_cluster_name=$RET

        while [ -z "$nats_cluster_port" ]; do
            db_title OpenUEM NATS Cluster
            db_input high openuem-server/nats-cluster-port || true
            db_go
            db_get openuem-server/nats-cluster-port
        done
        nats_cluster_port=$RET

        while [ -z "$nats_cluster_other_servers" ]; do
            db_title OpenUEM NATS Cluster
            db_input high openuem-server/nats-cluster-other-servers || true
            db_go
            db_get openuem-server/nats-cluster-other-servers
        done            
        nats_cluster_other_servers=$RET
    fi

else
    while [ -z "$nats_url" ]; do
        db_title NATS Server
        db_set openuem-server/nats-url "tls://$host.$domain:4433"
        db_input high openuem-server/nats-url
        db_go
        db_get openuem-server/nats-url
        nats_url=$RET
    done
fi

# Ask information for OCSP port if all components have been selected or just the OCSP
if [ "$components" = "$allComponents" ] || [ "$components" = "OpenUEM OCSP Responder" ]; then
    while [ -z "$ocsp_port" ]; do
        db_title OpenUEM OCSP Responder - Port
        db_input high openuem-server/ocsp-port || true
        db_go
        db_get openuem-server/ocsp-port
        ocsp_port=$RET
    done
else
    while [ -z "$ocsp_url" ]; do
        db_title OCSP Responder
        db_set openuem-server/ocsp-url "http://$host.$domain:8000"
        db_input high openuem-server/ocsp-url
        db_go
        db_get openuem-server/ocsp-url
        ocsp_url=$RET
    done
fi

# Ask information for Console
if [ "$components" = "$allComponents" ] || [ "$components" = "OpenUEM Web Console" ]; then
    while [ -z "$console_server" ] || [ -z "$console_port" ] || [ -z "$auth_port" ]; do
        db_title OpenUEM Web Console
        db_set openuem-server/console-server "$host.$domain"
        db_input high openuem-server/console-server || true
        db_input high openuem-server/console-port || true
        db_input high openuem-server/auth-port || true
        db_input high openuem-server/reverse-proxy-domain || true
        db_input high openuem-server/reverse-proxy-auth-port || true
        db_go
        db_get openuem-server/console-server
        console_server=$RET
        db_get openuem-server/console-port
        console_port=$RET
        db_get openuem-server/auth-port
        auth_port=$RET        
    done

    while [ -z "$jwt_key" ] || [ -z "$jwt_key_repeat" ] || [ "$jwt_key" != "$jwt_key_repeat" ]; do
        db_title OpenUEM Web Console
        db_input high openuem-server/console-jwt-key || true
        db_input high openuem-server/console-jwt-key-repeat || true
        db_go
        db_get openuem-server/console-jwt-key
        jwt_key=$RET
        db_get openuem-server/console-jwt-key-repeat
        jwt_key_repeat=$RET
    done
fi


# Ask optional password for Admin user certificate
# TODO - If first password is empty repeat should not show
if [ "$generateCerts" = "true" ]; then
    admin_cert_password="changeit"
    while [ "$admin_cert_password" != "$admin_cert_password_repeat" ]; do
        db_title OpenUEM Admin certificate
        db_input high openuem-server/admin-cert-password || true
        db_go
        db_get openuem-server/admin-cert-password
        admin_cert_password=$RET
        if [ -z "$admin_cert_password" ]; then
            admin_cert_password_repeat=$admin_cert_password
        else
            db_title OpenUEM Admin certificate
            db_input high openuem-server/admin-cert-password-again || true
            db_go
            db_get openuem-server/admin-cert-password-again
            admin_cert_password_repeat=$RET
        fi
    done
fi

# Certificates location if automatic generation hasn't been selected
if [ "$generateCerts" != "true" ]; then
    db_title OpenUEM CA
    db_input high openuem-server/ca-cert || true
    db_go
    if echo "$components" | grep -q "\\<OpenUEM Cert Manager Worker\\>"; then
        db_title OpenUEM CA
        db_input high openuem-server/ca-key || true
        db_go
    fi
fi

if [ "$generateCerts" != "true" ] && echo "$components" | grep -q "\\<OpenUEM NATS Server\\>"; then
    db_title NATS Server Authentication
    db_input high openuem-server/nats-cert || true
    db_input high openuem-server/nats-key || true
    db_go
fi

if [ "$generateCerts" != "true" ] && echo "$components" | grep -q "\\<OpenUEM OCSP Responder\\>"; then
    db_title OpenUEM OCSP Authentication
    db_input high openuem-server/ocsp-cert || true
    db_input high openuem-server/ocsp-key || true
    db_go
fi

if [ "$generateCerts" != "true" ] && echo "$components" | grep -q "\\<OpenUEM Web Console\\>"; then
    db_title Web Console Authentication
    db_input high openuem-server/console-cert || true
    db_input high openuem-server/console-key || true
    db_go
fi

if [ "$generateCerts" != "true" ] && echo "$components" | grep -q "\\<OpenUEM Agent Worker\\>"; then
    db_title OpenUEM Agent Worker Authentication
    db_input high openuem-server/agent-worker-cert || true
    db_input high openuem-server/agent-worker-key || true
    db_go
fi

if [ "$generateCerts" != "true" ] && echo "$components" | grep -q "\\<OpenUEM Notification Worker\\>"; then
    db_title OpenUEM Notification Worker Authentication
    db_input high openuem-server/notification-worker-cert || true
    db_input high openuem-server/notification-worker-key || true
    db_go
fi

if [ "$generateCerts" != "true" ] && echo "$components" | grep -q "\\<OpenUEM Cert Manager Worker\\>"; then
    db_title OpenUEM Cert-Manager Worker Authentication
    db_input high openuem-server/cert-manager-worker-cert || true
    db_input high openuem-server/cert-manager-worker-key || true
    db_go
fi

if [ "$generateCerts" != "true" ]; then
    db_title OpenUEM Updater Authentication
    db_input high openuem-server/updater-cert || true
    db_input high openuem-server/updater-key || true
    db_go
fi

if [ "$generateCerts" = "true" ]; then
    db_title OpenUEM Admin certificate
    db_input high openuem-server/admin-add-cert-username || true
    db_go
fi
