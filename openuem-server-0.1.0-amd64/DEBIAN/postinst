#!/bin/sh -e
# Source debconf library.
. /usr/share/debconf/confmodule

CONFIGFILE=/etc/openuem-server/openuem.ini

if [ ! -d /etc/openuem-server ]; then
    mkdir /etc/openuem-server
fi

# Create new user openuem if not exists
if ! getent passwd | grep -q '^openuem:'; then
    useradd -r openuem
fi

if [ ! -e $CONFIGFILE ]; then
    touch $CONFIGFILE
    chmod 660 $CONFIGFILE
else
    cp /dev/null $CONFIGFILE 
fi

# Components
db_get openuem-server/select-components
components=$RET

# This host
host=`hostname -s`

# Domain
db_get openuem-server/domain
domain=$RET
crudini --set $CONFIGFILE "Server" "domain" "$domain"

# Store complete host + domain
crudini --set $CONFIGFILE "Server" "console_server_name" "$host.$domain"

# Database URL
db_get openuem-server/postgres-host
db_host=$RET
db_get openuem-server/postgres-port
db_port=$RET
db_get openuem-server/postgres-username
db_username=$RET
db_get openuem-server/postgres-password
db_password=$RET
db_get openuem-server/postgres-database
db_name=$RET

db_url="postgres://$db_username:$db_password@$db_host:$db_port/$db_name"
crudini --set $CONFIGFILE "Server" "db_url" "$db_url"

# Certificates
db_get openuem-server/certificate-generation
generateCerts=$RET

db_get openuem-server/certificate-org-name
org_name=$RET
crudini --set $CONFIGFILE "Server" "org_name" "$org_name"

db_get openuem-server/certificate-org-country
org_country=$RET
crudini --set $CONFIGFILE "Server" "org_country" "$org_country"

db_get openuem-server/certificate-org-province
org_province=$RET
crudini --set $CONFIGFILE "Server" "org_province" "$org_province"

db_get openuem-server/certificate-org-locality
org_locality=$RET
crudini --set $CONFIGFILE "Server" "org_locality" "$org_locality"

db_get openuem-server/certificate-org-address
org_address=$RET
crudini --set $CONFIGFILE "Server" "org_address" "$org_address"

#OCSP
db_get openuem-server/ocsp-port
ocsp_responder_port=$RET
if [ -z "$ocsp_responder_port" ]; then
    db_get openuem-server/ocsp-url
    ocsp_url=$RET
    crudini --set $CONFIGFILE "Server" "ocsp_url" "$ocsp_url"
else
    ocsp_url="http://$host.$domain:$ocsp_responder_port" 
    crudini --set $CONFIGFILE "Server" "ocsp_port" "$ocsp_responder_port"
    crudini --set $CONFIGFILE "Server" "ocsp_url" "$ocsp_url"
fi

#NATS
db_get openuem-server/nats-port
nats_port=$RET
if [ -z "$ocsp_responder_port" ]; then
    db_get openuem-server/nats-url
    ocsp_url=$RET
    crudini --set $CONFIGFILE "Server" "nats_url" "$nats_url"
else
    nats_url="tls://$host.$domain:$nats_port"
    crudini --set $CONFIGFILE "Server" "nats_port" "$nats_port"
    crudini --set $CONFIGFILE "Server" "nats_url" "$nats_url"
fi
nats_dns_names="$host.$domain,localhost"

#Console
console_dns_names="$host.$domain,localhost"

db_get openuem-server/console-port
console_port=$RET
crudini --set $CONFIGFILE "Server" "console_port" "$console_port"

db_get openuem-server/auth-port
auth_port=$RET
crudini --set $CONFIGFILE "Server" "auth_port" "$auth_port"

db_get openuem-server/console-jwt-key
crudini --set $CONFIGFILE "Server" "console_jwt_key" "$RET"

#Admin cert password (optional)
db_get openuem-server/admin-cert-password
pass=$RET

# CA Certificate
if [ ! -d /etc/openuem-server/certificates/ca ]; then
    mkdir -p /etc/openuem-server/certificates/ca
fi

if [ "$generateCerts" = "true" ]; then
    /opt/openuem-server/bin/openuem-cert-manager create-ca --name "OpenUEM CA" --dst "/etc/openuem-server/certificates/ca" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 10
    crudini --set $CONFIGFILE "Server" "ca_cert_path" "/etc/openuem-server/certificates/ca/ca.cer"
    crudini --set $CONFIGFILE "Server" "ca_cert_key" "/etc/openuem-server/certificates/ca/ca.key"
else
    db_get openuem-server/ca-cert
    crudini --set $CONFIGFILE "Server" "ca_cert_path" "$RET"
    if echo "$components" | grep -q "\\<OpenUEM Cert Manager Worker\\>"; then
        db_get openuem-server/ca-key || true
        crudini --set $CONFIGFILE "Server" "ca_cert_key" "$RET"
    fi
fi

# NATS Certificate
if [ ! -d /etc/openuem-server/certificates/nats ]; then
    mkdir -p /etc/openuem-server/certificates/nats
fi

if [ "$generateCerts" = "true" ]; then
    /opt/openuem-server/bin/openuem-cert-manager server-cert --name "OpenUEM NATS" --dst "/etc/openuem-server/certificates/nats" --client-too --dns-names $nats_dns_names --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "nats" --ocsp $ocsp_url -dburl $db_url --description "NATS certificate" --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" 
    crudini --set $CONFIGFILE "Server" "nats_cert_path" "/etc/openuem-server/certificates/nats/nats.cer"
    crudini --set $CONFIGFILE "Server" "nats_key_path" "/etc/openuem-server/certificates/nats/nats.key"
else
    db_get openuem-server/nats-cert
    crudini --set $CONFIGFILE "Server" "nats_cert_path" $RET
    db_get openuem-server/nats-key
    crudini --set $CONFIGFILE "Server" "nats_key_path" $RET
fi

# OCSP Certificate
if [ ! -d /etc/openuem-server/certificates/ocsp ]; then
    mkdir -p /etc/openuem-server/certificates/ocsp
fi

if [ "$generateCerts" = "true" ]; then
    /opt/openuem-server/bin/openuem-cert-manager server-cert --name "OpenUEM OCSP" --dst "/etc/openuem-server/certificates/ocsp" --sign-ocsp --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "ocsp" --ocsp $ocsp_url --description "OCSP certificate" --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl $db_url 
    crudini --set $CONFIGFILE "Server" "ocsp_cert_path" "/etc/openuem-server/certificates/ocsp/ocsp.cer"
    crudini --set $CONFIGFILE "Server" "ocsp_key_path" "/etc/openuem-server/certificates/ocsp/ocsp.key"
else
    db_get openuem-server/ocsp-cert
    crudini --set $CONFIGFILE "Server" "ocsp_cert_path" $RET
    db_get openuem-server/ocsp-key
    crudini --set $CONFIGFILE "Server" "ocsp_key_path" $RET
fi

# Notification Worker Certificate
if [ ! -d /etc/openuem-server/certificates/notification-worker ]; then
    mkdir -p /etc/openuem-server/certificates/notification-worker
fi    

if [ "$generateCerts" = "true" ]; then
    /opt/openuem-server/bin/openuem-cert-manager client-cert --name "OpenUEM Notification Worker" --dst "/etc/openuem-server/certificates/notification-worker" --type="worker" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "worker" --ocsp $ocsp_url --description "Notification Worker's certificate" --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl $db_url 
    crudini --set $CONFIGFILE "Server" "notification_worker_cert_path" "/etc/openuem-server/certificates/notification-worker/worker.cer"
    crudini --set $CONFIGFILE "Server" "notification_worker_key_path" "/etc/openuem-server/certificates/notification-worker/worker.key"
else
    db_get openuem-server/notification-worker-cert
    crudini --set $CONFIGFILE "Server" "notification_worker_cert_path" $RET
    db_get openuem-server/notification-worker-key
    crudini --set $CONFIGFILE "Server" "notification_worker_key_path" $RET
fi

# Cert Manager Worker Certificate
if [ ! -d /etc/openuem-server/certificates/cert-manager-worker ]; then
    mkdir -p /etc/openuem-server/certificates/cert-manager-worker
fi    

if [ "$generateCerts" = "true" ]; then
    /opt/openuem-server/bin/openuem-cert-manager client-cert --name "OpenUEM Cert-Manager Worker" --dst "/etc/openuem-server/certificates/cert-manager-worker" --type="worker" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "worker" --ocsp $ocsp_url --description "Cert-Manager Worker's certificate" --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl $db_url 
    crudini --set $CONFIGFILE "Server" "cert_manager_worker_cert_path" "/etc/openuem-server/certificates/cert-manager-worker/worker.cer"
    crudini --set $CONFIGFILE "Server" "cert_manager_worker_key_path" "/etc/openuem-server/certificates/cert-manager-worker/worker.key"
else
    db_get openuem-server/cert-manager-worker-cert
    crudini --set $CONFIGFILE "Server" "cert_manager_worker_cert_path" $RET
    db_get openuem-server/cert-manager-worker-key
    crudini --set $CONFIGFILE "Server" "cert_manager_worker_key_path" $RET
fi
   
# Agent Worker Certificate      
if [ ! -d /etc/openuem-server/certificates/agents-worker ]; then
    mkdir -p /etc/openuem-server/certificates/agents-worker
fi

if [ "$generateCerts" = "true" ]; then
    /opt/openuem-server/bin/openuem-cert-manager client-cert --name "OpenUEM Agent Worker" --dst "/etc/openuem-server/certificates/agents-worker" --type="worker" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "worker" --ocsp $ocsp_url --description "OpenUEM Agent Worker's certificate" --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl $db_url 
    crudini --set $CONFIGFILE "Server" "agents_worker_cert_path" "/etc/openuem-server/certificates/agents-worker/worker.cer"
    crudini --set $CONFIGFILE "Server" "agents_worker_key_path" "/etc/openuem-server/certificates/agents-worker/worker.key"
else
    db_get openuem-server/agent-worker-cert
    crudini --set $CONFIGFILE "Server" "agents_worker_cert_path" $RET
    db_get openuem-server/agent-worker-key
    crudini --set $CONFIGFILE "Server" "agents_worker_key_path" $RET
fi

# Console Certificate         
if [ ! -d /etc/openuem-server/certificates/console ]; then
    mkdir -p /etc/openuem-server/certificates/console
fi

if [ "$generateCerts" = "true" ]; then
    /opt/openuem-server/bin/openuem-cert-manager server-cert --name "OpenUEM Console" --dst "/etc/openuem-server/certificates/console" --client-too -dns-names $console_dns_names --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "console" --ocsp $ocsp_url --description "Console certificate"  --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl $db_url 
    crudini --set $CONFIGFILE "Server" "console_cert_path" "/etc/openuem-server/certificates/console/console.cer"
    crudini --set $CONFIGFILE "Server" "console_key_path" "/etc/openuem-server/certificates/console/console.key"
else
    db_get openuem-server/console-cert
    crudini --set $CONFIGFILE "Server" "console_cert_path" $RET
    db_get openuem-server/console-key
    crudini --set $CONFIGFILE "Server" "console_key_path" $RET
fi

# Agent Certificate     
if [ ! -d /etc/openuem-server/certificates/agents ]; then
    mkdir -p /etc/openuem-server/certificates/agents
fi

if [ "$generateCerts" = "true" ]; then
    /opt/openuem-server/bin/openuem-cert-manager server-cert --name "OpenUEM Agent" --dns-names "*.$domain" --dst "/etc/openuem-server/certificates/agents" --client-too --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "agent" --ocsp $ocsp_url --description "Agent certificate"  --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl $db_url
fi

# Admin Certificate   
if [ ! -d /etc/openuem-server/certificates/users ]; then
    mkdir -p /etc/openuem-server/certificates/users
fi

if [ "$generateCerts" = "true" ]; then
    /opt/openuem-server/bin/openuem-cert-manager user-cert --username admin --pass "$pass" --dst "/etc/openuem-server/certificates/users" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --ocsp $ocsp_url --description "OpenUEM Administrator"  --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl $db_url
fi

# Copy our ca.cer to local trusted root ca (crt extension is required)
if [ "$generateCerts" = "true" ]; then

    # Ref: https://thomas-leister.de/en/how-to-import-ca-root-certificate/
    certfile="/etc/openuem-server/certificates/ca/ca.cer"
    certname="OpenUEM CA"

    ### For cert8 (legacy - DBM)
    for certDB in $(find /home -name "cert8.db")
    do
        certdir=$(dirname ${certDB});
        certutil -A -n "${certname}" -t "TC,C,T" -i ${certfile} -d dbm:${certdir}
    done

    ### For cert9 (SQL)
    for certDB in $(find /home -name "cert9.db")
    do
        certdir=$(dirname ${certDB});
        certutil -A -n "${certname}" -t "TC,C,T" -i ${certfile} -d sql:${certdir}
    done

    ## Autoinstall user certificate
    db_get openuem-server/admin-add-cert-username
    if [ ! -z $RET ]; then
        db_get openuem-server/admin-cert-password
        password="changeit"
        if [ ! -z $RET ]; then
            password=$RET
        fi

        certfile="/etc/openuem-server/certificates/users/admin.pfx"
        certname="OpenUEM Admin"



        ### For cert8 (legacy - DBM)
        for certDB in $(find /home/$RET -name "cert8.db")
        do
            certdir=$(dirname ${certDB});
            pk12util -i ${certfile} -d dbm:${certdir} -W $password
        done

        ### For cert9 (SQL)
        for certDB in $(find /home/$RET -name "cert9.db")
        do
            certdir=$(dirname ${certDB});
            pk12util -i ${certfile} -d sql:${certdir} -W $password
        done
    fi
fi

# Delete components binaries and units that haven't been selected
if ! echo "$components" | grep -q "\\<OpenUEM Web Console\\>"; then
    rm -f /opts/openuem-server/bin/openuem-console
    rm -rf /opts/openuem-server/bin/assets
    rm -rf /etc/systemd/system/openuem-console.service
fi

if ! echo "$components" | grep -q "\\<OpenUEM Agent Worker\\>"; then
    rm -f /opts/openuem-server/bin/openuem-agent-worker
    rm -rf /etc/systemd/system/openuem-agent-worker.service
fi

if ! echo "$components" | grep -q "\\<OpenUEM Notification Worker\\>"; then
    rm -f /opts/openuem-server/bin/openuem-notification-worker
    rm -rf /etc/systemd/system/openuem-notification-worker.service
fi

if ! echo "$components" | grep -q "\\<OpenUEM Cert Manager Worker\\>"; then
    rm -f /opts/openuem-server/bin/openuem-cert-manager-worker
    rm -rf /etc/systemd/system/openuem-cert-manager-worker.service
fi

if ! echo "$components" | grep -q "\\<OpenUEM OCSP Responder\\>"; then
    rm -f /opts/openuem-server/bin/openuem-ocsp-responder
    rm -rf /etc/systemd/system/openuem-ocsp-responder.service
fi

if ! echo "$components" | grep -q "\\<OpenUEM NATS Server\\>"; then
    rm -f /opts/openuem-server/bin/openuem-nats-service
    rm -rf /etc/systemd/system/openuem-nats.service
fi

# Create log directory
mkdir -p /var/log/openuem-server && chmod 770 /var/log/openuem-server && chown root:openuem /var/log/openuem-server

# Change permissions for INI file
chown openuem:openuem $CONFIGFILE

# Change ownership for /etc/openuem
chown -R openuem:openuem /etc/openuem-server

# Change ownsership for /opt/openuem-server
chown -R openuem:openuem /opt/openuem-server

# Reload our services
systemctl daemon-reload

# Start and enable our services
if echo "$components" | grep -q "\\<OpenUEM OCSP Responder\\>"; then
    systemctl enable openuem-ocsp-responder
    systemctl start openuem-ocsp-responder
fi

if echo "$components" | grep -q "\\<OpenUEM NATS Server\\>"; then
    # if echo "$components" | grep -q "\\<OpenUEM OCSP Responder\\>"; then
    #     crudini --ini-options=nospace --set "/etc/systemd/system/openuem-nats.service" "Unit" "After" "network.target openuem-ocsp-responder.service"
    #     systemctl daemon-reload
    # fi

    systemctl enable openuem-nats
    systemctl start openuem-nats
fi

if echo "$components" | grep -q "\\<OpenUEM Cert Manager Worker\\>"; then
    # if echo "$components" | grep -q "\\<OpenUEM NATS Server\\>"; then
    #     crudini --ini-options=nospace --set "/etc/systemd/system/openuem-cert-manager-worker.service" "Unit" "After" "network.target openuem-nats.service"
    #     systemctl daemon-reload
    # fi

    systemctl enable openuem-cert-manager-worker
    systemctl start openuem-cert-manager-worker
fi

if echo "$components" | grep -q "\\<OpenUEM Notification Worker\\>"; then
    # if echo "$components" | grep -q "\\<OpenUEM NATS Server\\>"; then
    #     crudini --ini-options=nospace --set "/etc/systemd/system/openuem-notification-worker.service" "Unit" "After" "network.target openuem-nats.service"
    #     systemctl daemon-reload
    # fi

    systemctl enable openuem-notification-worker
    systemctl start openuem-notification-worker
fi

if echo "$components" | grep -q "\\<OpenUEM Agent Worker\\>"; then
    # if echo "$components" | grep -q "\\<OpenUEM NATS Server\\>"; then
    #     crudini --ini-options=nospace --set "/etc/systemd/system/openuem-agent-worker.service" "Unit" "After" "network.target openuem-nats.service"
    #     systemctl daemon-reload
    # fi

    systemctl enable openuem-agent-worker
    systemctl start openuem-agent-worker
fi

if echo "$components" | grep -q "\\<OpenUEM Web Console\\>"; then
    # if echo "$components" | grep -q "\\<OpenUEM NATS Server\\>"; then
    #     crudini --ini-options=nospace --set "/etc/systemd/system/openuem-console.service" "Unit" "After" "network.target openuem-ocsp-responder.service openuem-nats.service"
    #     systemctl daemon-reload
    # fi

    systemctl enable openuem-console
    systemctl start openuem-console
fi
