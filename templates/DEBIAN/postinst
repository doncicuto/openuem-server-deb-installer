#!/bin/sh -e
# Source debconf library.
. /usr/share/debconf/confmodule

# Config file
CONFIGFILE=/etc/openuem-server/openuem.ini

if [ ! -d /etc/openuem-server ]; then
    mkdir /etc/openuem-server
fi

# Domain
db_get openuem-server/domain
domain=$RET

configFileExist="true"
if [ ! -e $CONFIGFILE ]; then
    touch $CONFIGFILE
    chmod 660 $CONFIGFILE
    configFileExist="false"
fi

# Create new user openuem if not exists
if ! getent passwd | grep -q '^openuem:'; then
    useradd -r openuem
fi

# Components
db_get openuem-server/select-components
components=$RET

# This host
host=$(hostname -s)

# Server
crudini --ini-options=nospace --set $CONFIGFILE "Server" "Version" "OPENUEM_VERSION"
crudini --ini-options=nospace --set $CONFIGFILE "Server" "Channel" "stable"

# Components
if [ "$configFileExist" = "false" ]; then
    if echo "$components" | grep -q "\\<OpenUEM OCSP Responder\\>"; then
        crudini --ini-options=nospace --set $CONFIGFILE "Components" "OCSP" "yes"
    fi

    if echo "$components" | grep -q "\\<OpenUEM NATS Server\\>"; then
        crudini --ini-options=nospace --set $CONFIGFILE "Components" "NATS" "yes"
    fi

    if echo "$components" | grep -q "\\<OpenUEM Web Console\\>"; then
        crudini --ini-options=nospace --set $CONFIGFILE "Components" "Console" "yes"
    fi

    if echo "$components" | grep -q "\\<OpenUEM Agent Worker\\>"; then
        crudini --ini-options=nospace --set $CONFIGFILE "Components" "AgentWorker" "yes"
    fi

    if echo "$components" | grep -q "\\<OpenUEM Notification Worker\\>"; then
        crudini --ini-options=nospace --set $CONFIGFILE "Components" "NotificationWorker" "yes"
    fi

    if echo "$components" | grep -q "\\<OpenUEM Cert Manager Worker\\>"; then
        crudini --ini-options=nospace --set $CONFIGFILE "Components" "CertManagerWorker" "yes"
    fi
fi

# Database URL
if [ "$configFileExist" = "false" ]; then
    db_get openuem-server/postgres-host
    db_host=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "DB" "PostgresHost" "$db_host"
    db_get openuem-server/postgres-port
    db_port=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "DB" "PostgresPort" "$db_port"
    db_get openuem-server/postgres-username
    db_username=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "DB" "PostgresUser" "$db_username"
    db_get openuem-server/postgres-password
    db_password=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "DB" "PostgresPassword" "$db_password"
    db_get openuem-server/postgres-database
    db_name=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "DB" "PostgresDatabase" "$db_name"
    db_url="postgres://$db_username:$db_password@$db_host:$db_port/$db_name"
    crudini --ini-options=nospace --set $CONFIGFILE "DB" "PostgresUrl" "$db_url"
fi

#OCSP
if [ "$configFileExist" = "false" ]; then
    db_get openuem-server/ocsp-port
    ocsp_responder_port=$RET
    if [ -z "$ocsp_responder_port" ]; then
        db_get openuem-server/ocsp-url
        ocsp_url=$RET
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OCSPUrls" "$ocsp_url"
    else
        ocsp_url="http://$host.$domain:$ocsp_responder_port" 
        crudini --ini-options=nospace --set $CONFIGFILE "OCSP" "OCSPPort" "$ocsp_responder_port"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OCSPUrls" "$ocsp_url"
    fi
fi

#NATS
if [ "$configFileExist" = "false" ]; then
    db_get openuem-server/nats-port
    nats_port=$RET
    if [ -z "$nats_port" ]; then
        db_get openuem-server/nats-url
        nats_url=$RET
        crudini --ini-options=nospace --set $CONFIGFILE "NATS" "NATSServers" "$nats_url"    
    else
        nats_url="$host.$domain:$nats_port"
        crudini --ini-options=nospace --set $CONFIGFILE "NATS" "NATSPort" "$nats_port"
        crudini --ini-options=nospace --set $CONFIGFILE "NATS" "NATSServer" "$host.$domain"
        crudini --ini-options=nospace --set $CONFIGFILE "NATS" "NATSServers" "$nats_url"

        db_get openuem-server/nats-cluster
        nats_cluster=$RET
        nats_dns_names="$host.$domain,localhost"
        if [ "$nats_cluster" = "true" ]; then
            db_get openuem-server/nats-cluster-name
            nats_cluster_name=$RET
            crudini --ini-options=nospace --set $CONFIGFILE "NATS" "NATSClusterName" "$nats_cluster_name"

            db_get openuem-server/nats-cluster-port
            nats_cluster_port=$RET
            crudini --ini-options=nospace --set $CONFIGFILE "NATS" "NATSClusterPort" "$nats_cluster_port"

            db_get openuem-server/nats-cluster-other-servers
            nats_cluster_other_servers=$RET
            crudini --ini-options=nospace --set $CONFIGFILE "NATS" "NATSOtherServers" "$nats_cluster_other_servers"

            # Split to add other servers to dns names      
            export IFS=","
            for server in $nats_cluster_other_servers
            do            
                host=$(echo "$server" | cut -d":" -f1)
                nats_dns_names="$nats_dns_names,$host"
            done
        fi
    fi
fi

if [ "$configFileExist" = "false" ]; then
    # Certificates
    db_get openuem-server/certificate-generation
    generateCerts=$RET

    db_get openuem-server/certificate-org-name
    org_name=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OrgName" "$org_name"

    db_get openuem-server/certificate-org-country
    org_country=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OrgCountry" "$org_country"

    db_get openuem-server/certificate-org-province
    org_province=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OrgProvince" "$org_province"

    db_get openuem-server/certificate-org-locality
    org_locality=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OrgLocality" "$org_locality"
    db_get openuem-server/certificate-org-address
    org_address=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OrgAddress" "$org_address"

    #Console
    console_dns_names="$host.$domain,localhost"

    db_get openuem-server/console-server
    crudini --ini-options=nospace --set $CONFIGFILE "Console" "hostname" "$RET"
    db_get openuem-server/console-port
    console_port=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "Console" "port" "$console_port"
    db_get openuem-server/auth-port
    auth_port=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "Console" "authport" "$auth_port"
    db_get openuem-server/reverse-proxy-domain
    reverse_proxy_server=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "Console" "reverseproxyserver" "$reverse_proxy_server"
    db_get openuem-server/reverse-proxy-auth-port
    reverse_proxy_auth_port=$RET
    crudini --ini-options=nospace --set $CONFIGFILE "Console" "reverseproxyauthport" "$reverse_proxy_auth_port"

    db_get openuem-server/console-jwt-key
    crudini --ini-options=nospace --set $CONFIGFILE "JWT" "Key" "$RET"

    #Admin cert password (optional)
    db_get openuem-server/admin-cert-password
    pass=$RET
    # Domain
    crudini --ini-options=nospace --set $CONFIGFILE "Console" "domain" "$domain"

    # CA Certificate
    if [ ! -d /etc/openuem-server/certificates/ca ]; then
        mkdir -p /etc/openuem-server/certificates/ca
    fi

    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager create-ca --name "OpenUEM CA" --dst "/etc/openuem-server/certificates/ca" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 10
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "CACert" "/etc/openuem-server/certificates/ca/ca.cer"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "CAKey" "/etc/openuem-server/certificates/ca/ca.key"
    else
        db_get openuem-server/ca-cert
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "CACert" "$RET"
        if echo "$components" | grep -q "\\<OpenUEM Cert Manager Worker\\>"; then
            db_get openuem-server/ca-key || true
            crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "CAKey" "$RET"
        fi
    fi

    # NATS Certificate
    if [ ! -d /etc/openuem-server/certificates/nats ]; then
        mkdir -p /etc/openuem-server/certificates/nats
    fi

    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager server-cert --name "OpenUEM NATS" --dst "/etc/openuem-server/certificates/nats" --type="nats" --client-too --dns-names "$nats_dns_names" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "nats" --ocsp "$ocsp_url" --dburl "$db_url" --description "NATS certificate" --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" 
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "NATSCert" "/etc/openuem-server/certificates/nats/nats.cer"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "NATSKey" "/etc/openuem-server/certificates/nats/nats.key"
    else
        db_get openuem-server/nats-cert
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "NATSCert" "$RET"
        db_get openuem-server/nats-key
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "NATSKey" "$RET"
    fi

    # OCSP Certificate
    if [ ! -d /etc/openuem-server/certificates/ocsp ]; then
        mkdir -p /etc/openuem-server/certificates/ocsp
    fi
    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager server-cert --name "OpenUEM OCSP" --dst "/etc/openuem-server/certificates/ocsp" --type="ocsp" --sign-ocsp --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "ocsp" --ocsp "$ocsp_url" --description "OCSP certificate" --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl "$db_url" 
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OCSPCert" "/etc/openuem-server/certificates/ocsp/ocsp.cer"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OCSPKey" "/etc/openuem-server/certificates/ocsp/ocsp.key"
    else
        db_get openuem-server/ocsp-cert
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OCSPCert" "$RET"
        db_get openuem-server/ocsp-key
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "OCSPKey" "$RET"
    fi

    # Notification Worker Certificate
    if [ ! -d /etc/openuem-server/certificates/notification-worker ]; then
        mkdir -p /etc/openuem-server/certificates/notification-worker
    fi    

    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager client-cert --name "OpenUEM Notification Worker" --dst "/etc/openuem-server/certificates/notification-worker" --type="worker" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "worker" --ocsp "$ocsp_url" --description "Notification Worker's certificate" --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl "$db_url" 
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "NotificationWorkerCert" "/etc/openuem-server/certificates/notification-worker/worker.cer"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "NotificationWorkerKey" "/etc/openuem-server/certificates/notification-worker/worker.key"
    else
        db_get openuem-server/notification-worker-cert
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "NotificationWorkerCert" "$RET"
        db_get openuem-server/notification-worker-key
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "NotificationWorkerKey" "$RET"
    fi

    # Cert Manager Worker Certificate
    if [ ! -d /etc/openuem-server/certificates/cert-manager-worker ]; then
        mkdir -p /etc/openuem-server/certificates/cert-manager-worker
    fi    

    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager client-cert --name "OpenUEM Cert-Manager Worker" --dst "/etc/openuem-server/certificates/cert-manager-worker" --type="worker" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "worker" --ocsp "$ocsp_url" --description "Cert-Manager Worker's certificate" --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl "$db_url" 
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "CertManagerWorkerCert" "/etc/openuem-server/certificates/cert-manager-worker/worker.cer"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "CertManagerWorkerKey" "/etc/openuem-server/certificates/cert-manager-worker/worker.key"
    else
        db_get openuem-server/cert-manager-worker-cert
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "CertManagerWorkerCert" "$RET"
        db_get openuem-server/cert-manager-worker-key
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "CertManagerWorkerKey" "$RET"
    fi
    
    # Agent Worker Certificate      
    if [ ! -d /etc/openuem-server/certificates/agents-worker ]; then
        mkdir -p /etc/openuem-server/certificates/agents-worker
    fi

    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager client-cert --name "OpenUEM Agent Worker" --dst "/etc/openuem-server/certificates/agents-worker" --type="worker" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "worker" --ocsp "$ocsp_url" --description "OpenUEM Agent Worker's certificate" --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl "$db_url" 
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "AgentWorkerCert" "/etc/openuem-server/certificates/agents-worker/worker.cer"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "AgentWorkerKey" "/etc/openuem-server/certificates/agents-worker/worker.key"
    else
        db_get openuem-server/agent-worker-cert
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "AgentWorkerCert" "$RET"
        db_get openuem-server/agent-worker-key
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "AgentWorkerKey" "$RET"
    fi

    # Console Certificate         
    if [ ! -d /etc/openuem-server/certificates/console ]; then
        mkdir -p /etc/openuem-server/certificates/console
    fi

    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager server-cert --name "OpenUEM Console" --dst "/etc/openuem-server/certificates/console" --type="console" --client-too --dns-names "$console_dns_names" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "console" --ocsp "$ocsp_url" --description "Console certificate"  --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl "$db_url" 
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "ConsoleCert" "/etc/openuem-server/certificates/console/console.cer"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "ConsoleKey" "/etc/openuem-server/certificates/console/console.key"
    else
        db_get openuem-server/console-cert
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "ConsoleCert" "$RET"
        db_get openuem-server/console-key
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "ConsoleKey" "$RET"
    fi

    # Reverse Proxy Certificate         
    if [ ! -d /etc/openuem-server/certificates/console ]; then
        mkdir -p /etc/openuem-server/certificates/console
    fi

    if [ "$generateCerts" = "true" ]; then
        db_get openuem-server/certificate-generation-for-reverse-proxy
        /opt/openuem-server/bin/openuem-cert-manager server-cert --name "OpenUEM Reverse Proxy" --dst "/etc/openuem-server/certificates/console" --type="proxy" --dns-names "$RET" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "proxy" --ocsp "$ocsp_url" --description "Reverse Proxy certificate"  --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl "$db_url" 
    fi

    # SFTP Certificate     
    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager client-cert --name "OpenUEM SFTP Client" --dst "/etc/openuem-server/certificates/console" --type="console" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "sftp" --ocsp "$ocsp_url" --description "SFTP Client"  --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl "$db_url"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "SFTPKey" "/etc/openuem-server/certificates/console/sftp.key"
    else    
        db_get openuem-server/sftp-key
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "SFTPKey" "$RET"
    fi

    # Updater Certificate     
    if [ ! -d /etc/openuem-server/certificates/updater ]; then
        mkdir -p /etc/openuem-server/certificates/updater
    fi
    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager client-cert --name "OpenUEM Updater Client" --dst "/etc/openuem-server/certificates/updater" --type="updater" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "updater" --ocsp "$ocsp_url" --description "Updater Client"  --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl "$db_url"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "UpdaterCert" "/etc/openuem-server/certificates/updater/updater.cer"
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "UpdaterKey" "/etc/openuem-server/certificates/updater/updater.key"
    else    
        db_get openuem-server/updater-cert
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "UpdaterCert" "$RET"
        db_get openuem-server/updater-key
        crudini --ini-options=nospace --set $CONFIGFILE "Certificates" "UpdaterKey" "$RET"
    fi


    # Agent Certificate     
    if [ ! -d /etc/openuem-server/certificates/agents ]; then
        mkdir -p /etc/openuem-server/certificates/agents
    fi

    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager client-cert --name "OpenUEM Agent" --dst "/etc/openuem-server/certificates/agents" --type="agent" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --filename "agent" --ocsp "$ocsp_url" --description "Agent certificate"  --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl "$db_url"
    fi

    # Admin Certificate   
    if [ ! -d /etc/openuem-server/certificates/users ]; then
        mkdir -p /etc/openuem-server/certificates/users
    fi

    if [ "$generateCerts" = "true" ]; then
        /opt/openuem-server/bin/openuem-cert-manager user-cert --username admin --pass "$pass" --dst "/etc/openuem-server/certificates/users" --org "$org_name" --country "$org_country" --province "$org_province" --locality "$org_locality" --address "$org_address" --years-valid 2 --ocsp "$ocsp_url" --description "OpenUEM Administrator"  --cacert "/etc/openuem-server/certificates/ca/ca.cer" --cakey "/etc/openuem-server/certificates/ca/ca.key" --dburl "$db_url"
    fi

    # Copy our ca.cer to local trusted root ca (crt extension is required)
    if [ "$generateCerts" = "true" ]; then

        # Ref: https://thomas-leister.de/en/how-to-import-ca-root-certificate/
        certfile="/etc/openuem-server/certificates/ca/ca.cer"
        certname="OpenUEM CA"

        ### For cert8 (legacy - DBM)
        for certDB in $(find /home -name "cert8.db")
        do
            certdir=$(dirname "${certDB}");
            certutil -A -n "${certname}" -t "TC,C,T" -i "${certfile}" -d dbm:"${certdir}"
        done

        ### For cert9 (SQL)
        for certDB in $(find /home -name "cert9.db")
        do
            certdir=$(dirname "${certDB}");
            certutil -A -n "${certname}" -t "TC,C,T" -i "${certfile}" -d sql:"${certdir}"
        done

        ## Autoinstall user certificate
        db_get openuem-server/admin-add-cert-username
        if [ -n "$RET" ]; then
            db_get openuem-server/admin-cert-password
            password="changeit"
            if [ -n "$RET" ]; then
                password=$RET
            fi

            certfile="/etc/openuem-server/certificates/users/admin.pfx"
            certname="OpenUEM Admin"

            ### For cert8 (legacy - DBM)
            for certDB in $(find /home/"$RET" -name "cert8.db")
            do
                certdir=$(dirname "${certDB}");
                pk12util -i "${certfile}" -d dbm:"${certdir}" -W "$password"
            done

            ### For cert9 (SQL)
            for certDB in $(find /home/"$RET" -name "cert9.db")
            do
                certdir=$(dirname "${certDB}");
                pk12util -i "${certfile}" -d sql:"${certdir}" -W "$password"
            done
        fi
    fi
fi
# Delete components binaries and units that haven't been selected
if ! echo "$components" | grep -q "\\<OpenUEM Web Console\\>"; then
    rm -f /opt/openuem-server/bin/openuem-console
    rm -rf /opt/openuem-server/bin/assets
    rm -rf /etc/systemd/system/openuem-console.service
fi

if ! echo "$components" | grep -q "\\<OpenUEM Agent Worker\\>"; then
    rm -f /opt/openuem-server/bin/openuem-agent-worker
    rm -rf /etc/systemd/system/openuem-agent-worker.service
fi

if ! echo "$components" | grep -q "\\<OpenUEM Notification Worker\\>"; then
    rm -f /opt/openuem-server/bin/openuem-notification-worker
    rm -rf /etc/systemd/system/openuem-notification-worker.service
fi

if ! echo "$components" | grep -q "\\<OpenUEM Cert Manager Worker\\>"; then
    rm -f /opt/openuem-server/bin/openuem-cert-manager-worker
    rm -rf /etc/systemd/system/openuem-cert-manager-worker.service
fi

if ! echo "$components" | grep -q "\\<OpenUEM OCSP Responder\\>"; then
    rm -f /opt/openuem-server/bin/openuem-ocsp-responder
    rm -rf /etc/systemd/system/openuem-ocsp-responder.service
fi

if ! echo "$components" | grep -q "\\<OpenUEM NATS Server\\>"; then
    rm -f /opt/openuem-server/bin/openuem-nats-service
    rm -rf /etc/systemd/system/openuem-nats.service
fi

# Create log directory
mkdir -p /var/log/openuem-server && chmod 770 /var/log/openuem-server && chown root:openuem /var/log/openuem-server

# Change permissions for INI file
chown openuem:openuem $CONFIGFILE

# Change ownership for /etc/openuem
chown -R openuem:openuem /etc/openuem-server

# Change access to /etc/openuem/certificates
chmod -R ug+rwX,o-rwx /etc/openuem-server/certificates

# Change ownsership for /opt/openuem-server
chown -R openuem:openuem /opt/openuem-server

# Reload our services
systemctl daemon-reload

# Start and enable our services
if echo "$components" | grep -q "\\<OpenUEM OCSP Responder\\>"; then
    systemctl enable openuem-ocsp-responder
    systemctl restart openuem-ocsp-responder
fi

if echo "$components" | grep -q "\\<OpenUEM NATS Server\\>"; then
    systemctl enable openuem-nats
    systemctl restart openuem-nats
fi

# OpenUEM server updater should be enabled in any case
systemctl enable openuem-server-updater
systemctl restart openuem-server-updater

if echo "$components" | grep -q "\\<OpenUEM Cert Manager Worker\\>"; then
    systemctl enable openuem-cert-manager-worker
    systemctl restart openuem-cert-manager-worker
fi

if echo "$components" | grep -q "\\<OpenUEM Notification Worker\\>"; then
    systemctl enable openuem-notification-worker
    systemctl restart openuem-notification-worker
fi

if echo "$components" | grep -q "\\<OpenUEM Agent Worker\\>"; then
    systemctl enable openuem-agent-worker
    systemctl restart openuem-agent-worker
fi

if echo "$components" | grep -q "\\<OpenUEM Web Console\\>"; then
    systemctl enable openuem-console
    systemctl restart openuem-console
fi

# Add openuem user to sudoers.d so it can use apt
echo "openuem ALL = NOPASSWD : /usr/bin/apt" >> /etc/sudoers.d/openuem

# Enable atd for update server tasks
sudo systemctl enable --now atd


echo "🚀 OpenUEM has been installed!"